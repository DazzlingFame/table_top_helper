{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","state","tableCount","pairsData","prevProps","prevState","snapshot","this","initializePairs","event","setState","Number","parseInt","target","value","pairIndex","isFirst","newPairData","firstPlayerName","secondPlayerName","updatedData","i","push","playedTables","className","type","onChange","onPlayerNameChanged","tables","createPlayersPair","toString","onTableCountChanged","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAuHeA,G,wDA7FX,WAAYC,GAAe,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACTC,WAAY,EACZC,UAAW,IAJO,E,+DAQPC,EAA4BC,EAA4BC,GACnED,EAAUH,aAAeK,KAAKN,MAAMC,YACpCK,KAAKC,oB,0CAIOC,GAChBF,KAAKG,SAAS,CACVR,WAAYS,OAAOC,SAASH,EAAMI,OAAOC,QAAU,M,0CAIvCL,EAAsCM,EAAmBC,GAAoB,IAGzFC,EAFGd,EAAaI,KAAKN,MAAlBE,UAKHc,EADAD,EACW,2BACJb,EAAUY,IADN,IAEPG,gBAAiBT,EAAMI,OAAOC,QAGvB,2BACJX,EAAUY,IADN,IAEPI,iBAAkBV,EAAMI,OAAOC,QAIvC,IAAMM,EAAcjB,EACpBiB,EAAYL,GAAaE,EAEzBV,KAAKG,SAAS,CACVP,UAAWiB,M,wCAMf,IADA,IAAMjB,EAAyB,GACtBkB,EAAI,EAAGA,EAAId,KAAKN,MAAMC,WAAYmB,IACvClB,EAAUmB,KAAK,CACXP,UAAWM,EACXH,gBAAiB,GACjBC,iBAAkB,GAClBI,aAAc,KAGtBhB,KAAKG,SAAS,CACVP,gB,wCAIUY,GAAqC,IAAD,WAClD,OACI,sBAAKS,UAAU,yBAAf,UACI,mBAAGA,UAAU,qBAAb,8CACA,uBAAOA,UAAW,oBAAqBC,KAAM,OAAQX,MAAK,UAAEP,KAAKN,MAAME,UAAUY,UAAvB,aAAE,EAAiCG,gBAAiBQ,SAAU,SAAAjB,GAAK,OAAI,EAAKkB,oBAAoBlB,EAAOM,GAAW,MAC5K,mBAAGS,UAAU,qBAAb,8CACA,uBAAOA,UAAW,oBAAqBC,KAAM,OAAQX,MAAK,UAAEP,KAAKN,MAAME,UAAUY,UAAvB,aAAE,EAAiCI,iBAAkBO,SAAU,SAAAjB,GAAK,OAAI,EAAKkB,oBAAoBlB,EAAOM,W,+BAQ1K,IAHM,IAAD,OACEb,EAAcK,KAAKN,MAAnBC,WACD0B,EAA4B,GACzBP,EAAI,EAAGA,EAAInB,EAAYmB,IAC5BO,EAAON,KAAKf,KAAKsB,kBAAkBR,IAGvC,OACI,qBAAKG,UAAU,MAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qGAGA,uBAAOA,UAAW,oBAAqBC,KAAM,OAAQX,MAAOP,KAAKN,MAAMC,WAAW4B,WAC3EJ,SAAU,SAACjB,GAAD,OAAW,EAAKsB,oBAAoBtB,MACpDmB,W,GAvFHI,IAAMC,YCXTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ce2e8b0.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\n\n// type PlayerData = {\n//     pairIndex: number,\n//     name: string,\n//     playedTables: number[]\n// }\n\ntype PairsData = {\n    pairIndex: number,\n    firstPlayerName: string;\n    secondPlayerName: string;\n    playedTables: number[]\n}\n\ntype Props = {\n\n};\n\ntype State = {\n    tableCount: number,\n    pairsData: PairsData[];\n}\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            tableCount: 0,\n            pairsData: [],\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any): void {\n        if (prevState.tableCount !== this.state.tableCount) {\n            this.initializePairs();\n        }\n    }\n\n    onTableCountChanged(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            tableCount: Number.parseInt(event.target.value) || 0,\n        })\n    }\n\n    onPlayerNameChanged(event: ChangeEvent<HTMLInputElement>, pairIndex: number, isFirst?: boolean) {\n        const {pairsData} = this.state;\n\n        let newPairData: PairsData | undefined;\n\n        if (isFirst) {\n            newPairData = {\n                ...pairsData[pairIndex],\n                firstPlayerName: event.target.value,\n            }\n        } else {\n            newPairData = {\n                ...pairsData[pairIndex],\n                secondPlayerName: event.target.value,\n            }\n        }\n\n        const updatedData = pairsData;\n        updatedData[pairIndex] = newPairData;\n\n        this.setState({\n            pairsData: updatedData,\n        });\n    }\n\n    initializePairs() {\n        const pairsData: PairsData[] = [];\n        for (let i = 0; i < this.state.tableCount; i++) {\n            pairsData.push({\n                pairIndex: i,\n                firstPlayerName: '',\n                secondPlayerName: '',\n                playedTables: [],\n            })\n        }\n        this.setState({\n            pairsData,\n        })\n    }\n\n    createPlayersPair(pairIndex: number): React.ReactNode {\n        return (\n            <div className=\"players_pair_container\">\n                <p className=\"player_name_header\">Игрок 1</p>\n                <input className={'player_name_input'} type={'text'} value={this.state.pairsData[pairIndex]?.firstPlayerName} onChange={event => this.onPlayerNameChanged(event, pairIndex, true)}/>\n                <p className=\"player_name_header\">Игрок 2</p>\n                <input className={'player_name_input'} type={'text'} value={this.state.pairsData[pairIndex]?.secondPlayerName} onChange={event => this.onPlayerNameChanged(event, pairIndex)}/>\n            </div>\n        )\n    }\n\n    render() {\n        const {tableCount} = this.state;\n        const tables: React.ReactNode[] = [];\n        for (let i = 0; i < tableCount; i++) {\n            tables.push(this.createPlayersPair(i));\n        }\n\n        return (\n            <div className=\"App\">\n                <div className=\"App-header\">\n                    <p>\n                        Число столов:\n                    </p>\n                    <input className={'table_count_input'} type={'text'} value={this.state.tableCount.toString()}\n                           onChange={(event) => this.onTableCountChanged(event)}/>\n                    {tables}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}